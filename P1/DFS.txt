from Maze import Maze
from App import App
import pygame
from pygame.locals import *
import numpy as np
import time
import csv
import sys
from Stack import Node,Stack
import random 


#compareResults method: the general method to be called for a maze run
def compareResults():
    class DFS:
        def __init__(self,DFS):
            self.DFS = DFS
            
        def isLocValid(self,y, x):
            """check if the input position is valid.
            valid means that the x,y is smaller or equal to max or bigger or equal to 1"""
            if y < height and y>=0 and x < width and x >= 0:
                return True
            else:
                return False
    
        # You might want to make this	
        def getNextNeighbour(self,y, x, flag):
            """at each location, check the four directions firsly,
            then depends on flag value, if true, random the order of the return value,
            if false, check top, right, bot, left 
            """
            check_top = self.isLocValid(y-1,x) and (m[y-1,x] in ( ' ','E'))
            check_right = self.isLocValid(y,x+1) and (m[y,x+1] in (' ', 'E'))
            check_bot = self.isLocValid(y+1,x) and (m[y+1,x] in( ' ', 'E'))
            check_left = self.isLocValid(y,x-1) and (m[y,x-1] in( ' ', 'E'))
            
            if flag == True:
                check_sequence = random.sample([(check_top,(y-1,x)), (check_right,(y,x+1)), 
                                                (check_bot,(y+1,x)), (check_left,(y,x-1))],4)
            else:
                check_sequence = check_sequence = [(check_top,(y-1,x)), (check_right,(y,x+1)), 
                                                (check_bot,(y+1,x)), (check_left,(y,x-1))]
            #print(check_sequence)
            if check_sequence[0][0]: 
                    return check_sequence[0][1]
            elif check_sequence[1][0]: 
                return check_sequence[1][1]
            elif check_sequence[2][0]: 
                return check_sequence[2][1]
            elif check_sequence[3][0]: 
                return check_sequence[3][1]
            else:
                return None
            
        
        def loadMaze(self,filename):
            #load the maze
            arr = np.genfromtxt(filename,dtype = str, delimiter = 1,comments = None)
            return arr

    ###########Initialization################## 
    """
    totalSteps: the total number of steps it used to find the exit
    stepsInPath: total number of valid steps to get to the exit exluding tracebacks
    filename: system argument for maze file
    delay: time delay for display to refresh
    flag: when true, we use the random check order, when false, the check order
          will be top, right, bot, left
    """
    totalSteps = 0
    stepsInPath = 0
    filename = sys.argv[1]
    delay = float(sys.argv[2])
    
    try:
        if sys.argv[3].lower() == 'true':
            flag = True
        elif sys.argv[3].lower() == 'false':
            flag = False
        else:
            flag = False
    except IndexError:
        flag = False
    
    #initialize the DFS object
    DFS = DFS('DFS')
    m = DFS.loadMaze(filename)
    
    height, width = m.shape
    a = App(m)
    # Find the Start location
    for i in range(0,height):
        for j in range(0,width):
            if m[i,j] == 'S':
                y = i 
                x = j
                totalSteps = 1
                
    #print("found the starting point and their axis is: " + " x: " + str(x) + " y: " + str(y))        
    # make the position a tuple -- remember, it's like a list, but with round brackets. 
    """s_pos: starting position
       cur_pos: current position
       nei_pos: neightbour position
       prev_pos: previous position
    """
    #initialize the start position
    s_pos = (y,x)
    
    # make stack
    myStack = Stack()
    
    #push the start position to the stack as the first element
    myStack.push(s_pos)
    
    
    # While stack is not empty...
    
    #initialize the current position
    cur_pos = myStack.peek()   
    
    #initialize the next avaible neightbor position
    nei_pos = DFS.getNextNeighbour(cur_pos[0],cur_pos[1],flag) 
    
    #Main running algorithm
    """thoughts are: if current location is E or f, we will end the loop.
                     else we will continue to find. 
                     Under that: 
                         1. if the next neigbour positions is available and 
                         is not the exit E, we weill proceed and move on.
                         2. if the next neigbour position is available and is 
                         exit E, we will get to the E and hence found the exit
                         3. if the next neiboughr is not avaible, we hit an dead
                         end, so we will need to backtrack. 
        print messages are used to debug. 
        Each movement, the total steps increase by 1
    """
    while myStack.length() is not None:
        cur_pos = myStack.peek()
        nei_pos = nei_pos = DFS.getNextNeighbour(cur_pos[0],cur_pos[1],flag)
        
        a.on_init()
        a.on_render()
        time.sleep(delay)
        
        if m[cur_pos] in ('E','f'):
            print("we have found the exit.")
            m[cur_pos] = "f"
            break
        else:
            if nei_pos is not None and m[nei_pos] not in ('E','#','x'):
                #next neighbour available then proceed
                myStack.push(nei_pos)
                m[cur_pos] = 'p'
                m[nei_pos] = 'c'
                
            elif nei_pos is not None and m[nei_pos] == 'E':
                #next neighbour is the exit....
                myStack.push(nei_pos)
                m[cur_pos] = 'p'
                m[nei_pos] = 'f'
            elif nei_pos is None:
                #backtrack
                prev_pos = cur_pos
                m[prev_pos] = 'x'
                myStack.pop()
                
                
        totalSteps += 1
        #this session is for debugging
        #using to print out each step and result in the console
        #print (str(totalSteps))
        #print('current position: '+' y: ' + str(cur_pos[0]) + ' x: ' + str(cur_pos[1]))
        #if nei_pos is not None:
        #    print('neighbour position: '+' y: ' + str(nei_pos[0]) + ' x: ' + str(nei_pos[1]))
        #print(m)
        
    a.on_render()
    
    #valid steps in path are the stack length after we found the exit    
    stepsInPath = myStack.length()        
    
    print('Total Steps:\t' + str(totalSteps))
    print('Steps In Path:\t' + str(stepsInPath))
    return (totalSteps, stepsInPath)

######list to record results:

filename = sys.argv[1]

try:
    if sys.argv[3].lower() == 'true':
        flag = True
    elif sys.argv[3].lower() == 'false':
        flag = False
    else:
        flag = False
except IndexError:
    flag = False
    

"""
    flag is defaulted to false, that way we only run the maze for one time.
    when flag is set to be true, we will call it 30 times. 
    I created two lists to store the results then cast them into numpy arrays
    then I calculated the mean, median and standard deviation of the 30 trials.
    
"""
if flag == True:
    m_steps = []
    m = 0
    for i in range(30):
        m_steps.append(compareResults())  
        m += 1
        
    m_totalSteps = []
    m_stepsinPath = []
    for i in range(len(m_steps)):
        m_totalSteps.append(m_steps[i][0])
        m_stepsinPath.append(m_steps[i][1])
    m_totalSteps = np.asarray(m_totalSteps)
    m_stepsinPath = np.asarray(m_stepsinPath)
    
    print('for file: ', filename, 'with flag set to:', flag )
    
    print ('mean for total steps: ',np.mean(m_totalSteps,axis = 0))
    print ('median for total steps: ', np.median(m_totalSteps,axis = 0))
    print ('standard deviation for total steps: ', np.std(m_totalSteps,axis = 0))
    
    print ('mean for steps in path: ',np.mean(m_stepsinPath,axis = 0))
    print ('median for steps in path: ', np.median(m_stepsinPath,axis = 0))
    print ('standard deviation for steps in path: ', np.std(m_stepsinPath,axis = 0))

else:
    compareResults()
        


"""Results discussion:
    for file:  m1.txt and flag set to: False
        Total steps: 9
        Steps in Path: 5
    for file:  m1.txt with flag set to: True
        mean for total steps:  8.27
        median for total steps:  9.0
        standard deviation for total steps:  2.22
        mean for steps in path:  5.0
        median for steps in path:  5.0
        standard deviation for steps in path:  0.0
    
    for file:  m2.txt and flag set to: False
        Total steps: 22
        Steps in Path: 4
    for file:  m2.txt with flag set to: True
        mean for total steps:  12.4
        median for total steps:  4.0
        standard deviation for total steps:  8.98
        mean for steps in path:  4.0
        median for steps in path:  4.0
        standard deviation for steps in path:  0.0
    
    for file:  m3.txt and flag set to: False
        Total steps: 245
        Steps in Path: 67
    for file:  m3.txt with flag set to: True
        mean for total steps:  173.73
        median for total steps:  170
        standard deviation for total steps:  61.22
        mean for steps in path:  54.2
        median for steps in path:  53.0
        standard deviation for steps in path:  6.54
        
    for file:  m4.txt and flag set to: False
        Total steps: 344
        Steps in Path: 2
    for file:  m4.txt with flag set to: True
        mean for total steps:  184
        median for total steps:  344
        standard deviation for total steps:  170.62
        mean for steps in path:  2
        median for steps in path:  2
        standard deviation for steps in path:  0
    
    As we can observe from the results, the random check order when flag is
    set to be true improves the model, especially when the maze becomes 
    more and more complex. For small and simple maze like m1, the fixed order 
    is good but for m2, m3, m4, random order can have significant improvement.
    
    Random order has the potential to avoid some unnecessary branches in m3.
    
    For m4, the fixed order will surely miss the exit next to the beginning due
    to its order. The random order may find it on the second movement.
"""














